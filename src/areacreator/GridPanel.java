package areacreator;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import javax.swing.BorderFactory;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollBar;

/**
 *
 * @author Peixoto
 */
public class GridPanel extends JComponent implements GridPanelInterface {
    private ArrayList<JLabel> tilesLabel;
    private JScrollBar horizontalBar, verticalBar;
    private JComponent grid;
    private int offsetX, offsetY, maxTilesOnScreenX, horizontalTilesCount, indice;
    private final int maxTilesOnScreenY;
    
    /**
     * Creates new form GridPanel
     */
    
    public GridPanel() {                
        this(DEFAULT_TILE_WIDTH, DEFAULT_TILE_HEIGHT, DEFAULT_HORIZONTAL_TILE_COUNT, DEFAULT_VERTICAL_TILE_COUNT);        
    }
    
    public GridPanel(int singleTileWidth, int singleTileHeight, int horizontalTilesCount, int verticalTilesCount) {        
        tilesLabel = new ArrayList<>();        
        grid = new JComponent(){};
        
        this.horizontalTilesCount = horizontalTilesCount;
        
        horizontalBar = new JScrollBar(JScrollBar.HORIZONTAL);
        verticalBar = new JScrollBar(JScrollBar.VERTICAL);
        
        grid.setSize((singleTileWidth*horizontalTilesCount), (singleTileHeight*verticalTilesCount));
        grid.setLayout(null);
        
        int x = 10, y = 10, horizontalCount = 0;
        
        for(int i = 0; i < (horizontalTilesCount*verticalTilesCount); i++) {
            tilesLabel.add(new JLabel());
            tilesLabel.get(i).setSize(singleTileWidth, singleTileHeight);            
            tilesLabel.get(i).setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
            indice = i;
            tilesLabel.get(i).addMouseListener(new MouseListener() {
                private final int index = indice;    
                @Override
                public void mouseClicked(MouseEvent e) {
                    tilesLabel.get(index).setBackground(Color.red);
                    tilesLabel.get(index).repaint();                    
                }

                @Override
                public void mousePressed(MouseEvent e) {}

                @Override
                public void mouseReleased(MouseEvent e) {}

                @Override
                public void mouseEntered(MouseEvent e) {}

                @Override
                public void mouseExited(MouseEvent e) {}
            });
            grid.add(tilesLabel.get(i));
            tilesLabel.get(i).setLocation(x, y);
            
            horizontalCount++;
            if(horizontalCount < horizontalTilesCount) {
                x += singleTileWidth;
            }
            else {
                horizontalCount = 0;
                x = 10;
                y += singleTileHeight;
            }            
        }        
        
        maxTilesOnScreenX = getWidth()/singleTileWidth;
        maxTilesOnScreenY = getHeight()/singleTileHeight;
        
        setSize(650, 480);
        setLayout(null);
        setBorder(BorderFactory.createLineBorder(Color.yellow));
        
        add(grid);
        grid.setBounds(0, 0, (getWidth()-31), (getHeight()-31));        
        
        add(horizontalBar);
        horizontalBar.setBounds(1, getHeight()-31, getWidth()-32, 20);
        horizontalBar.setMaximum(horizontalTilesCount);
        
        horizontalBar.addMouseListener(new MouseListener() {
            
            @Override
            public void mouseClicked(MouseEvent e) {
                offsetX = horizontalBar.getBlockIncrement(offsetX);
                System.out.println(offsetX+"fgasf");
            }

            @Override
            public void mousePressed(MouseEvent e) {}
            public void mouseReleased(MouseEvent e) {}
            public void mouseEntered(MouseEvent e) {}
            public void mouseExited(MouseEvent e) {}
        });
        
        add(verticalBar);
        verticalBar.setBounds(getWidth()-31, 1, 20, getHeight()-32);        
    }   
    
    /*public void paintComponents(Graphics g) {
        int index = offsetX;
        for(int i = 0; i < maxTilesOnScreenY; i++) {
            for(int i2 = 0; i2 < maxTilesOnScreenX; i2++) {
                tilesLabel.get(index).paint(g);
                ++index;
            }
            index += (horizontalTilesCount - maxTilesOnScreenX);
        }
    }*/
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
    }// </editor-fold>//GEN-END:initComponents

    public void mouseClick() {
        formMouseClicked(null);        
    }
    
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        int index = offsetX;
        for(int i = 0; i < tilesLabel.size(); i++) {
                tilesLabel.get(i).setBackground(Color.red);
                ++index;
            index += (horizontalTilesCount - maxTilesOnScreenX);
        }     
        repaint();
    }//GEN-LAST:event_formMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
